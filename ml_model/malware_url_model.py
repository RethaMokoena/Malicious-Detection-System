import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report
import joblib
import os

class MalwareURLClassifier:
    def __init__(self, dataset_path, model_path=os.path.join('ml_model', 'malware_url_model.pkl')):
        """Initialize the classifier with paths"""
        self.dataset_path = dataset_path
        self.model_path = model_path
        self.model = None
        self.X_train = None
        self.X_test = None
        self.y_train = None
        self.y_test = None

    def load_data(self):
        """Load dataset from CSV file"""
        self.df = pd.read_csv(self.dataset_path)
        return self.df

    def inspect_data(self):
        """Display basic dataset information"""
        print("Dataset sample:")
        print(self.df.head())
        print("\nLabel distribution:")
        print(self.df['phishing'].value_counts())

    def preprocess_data(self, target_column='phishing'):
        """Prepare features and labels, split into train/test sets"""
        X = self.df.drop(columns=[target_column])
        y = self.df[target_column]
        
        self.X_train, self.X_test, self.y_train, self.y_test = train_test_split(
            X, y, test_size=0.2, random_state=42, stratify=y
        )
        return self.X_train, self.X_test, self.y_train, self.y_test

    def train(self, n_estimators=100, random_state=42):
        """Train Random Forest classifier"""
        self.model = RandomForestClassifier(
            n_estimators=n_estimators, 
            random_state=random_state
        )
        print("\nTraining model...")
        self.model.fit(self.X_train, self.y_train)
        return self.model

    def evaluate(self):
        """Evaluate model performance"""
        if not self.model:
            raise ValueError("Model not trained yet. Call train() first.")
            
        y_pred = self.model.predict(self.X_test)
        print("\nModel Evaluation:")
        print(classification_report(self.y_test, y_pred))
        return classification_report(self.y_test, y_pred, output_dict=True)

    def save_model(self):
        """Save trained model to file"""
        if not self.model:
            raise ValueError("No model to save. Train the model first.")
            
        joblib.dump(self.model, self.model_path)
        print(f"Model saved to {self.model_path}")

    def load_saved_model(self):
        """Load previously saved model"""
        self.model = joblib.load(self.model_path)
        return self.model

    def run_pipeline(self):
        """Complete pipeline from data loading to model evaluation"""
        self.load_data()
        self.inspect_data()
        self.preprocess_data()
        self.train()
        self.evaluate()
        self.save_model()


if __name__ == "__main__":
    # Example usage
    classifier = MalwareURLClassifier(
        dataset_path=os.path.join('ml_model', 'datasets', 'web-page-phishing.csv'),
        model_path=os.path.join('ml_model', 'malware_url_model.pkl')
    )
    
    # Run complete pipeline
    classifier.run_pipeline()
    
    # Alternatively, use individual methods:
    # classifier.load_data()
    # classifier.preprocess_data()
    # classifier.train()
    # classifier.evaluate()
    # classifier.save_model()

